import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import BINARY

from settings.db import Base


class OneHotEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    attack_vector_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_vector_ohe.id"), type_=int)
    attack_complexity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_complexity_ohe.id"), type_=int)
    privileges_required_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("privileges_required_ohe.id"), type_=int)
    user_interaction_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("user_interaction_ohe.id"), type_=int)
    scope_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("scope_ohe.id"), type_=int)
    confidentiality_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("confidentiality_ohe.id"), type_=int)
    integrity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("integrity_ohe.id"), type_=int)
    availability_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("availability_ohe.id"), type_=int)


class AttackVectorOHE(Base):
    __tablename__ = "attack_vector_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_A: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_P: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AttackComplexityOHE(Base):
    __tablename__ = "attack_complexity_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_H: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class PrivilegesRequiredOHE(Base):
    __tablename__ = "privileges_required_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_H: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class UserInteractionOHE(Base):
    __tablename__ = "user_interaction_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_R: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class ScopeOHE(Base):
    __tablename__ = "scope_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_C: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_U: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class ConfidentialityOHE(Base):
    __tablename__ = "confidentiality_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_H: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)

class IntegrityOHE(Base):
    __tablename__ = "integrity_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_H: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AvailabilityOHE(Base):
    __tablename__ = "availability_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_H: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)