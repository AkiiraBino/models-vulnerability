import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import FLOAT

from settings.db import Base


class BackwardDifferenceEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    attack_vector_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_vector_bde.id"), type_=int)
    attack_complexity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_complexity_bde.id"), type_=int)
    privileges_required_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("privileges_required_bde.id"), type_=int)
    user_interaction_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("user_interaction_bde.id"), type_=int)
    scope_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("scope_bde.id"), type_=int)
    confidentiality_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("confidentiality_bde.id"), type_=int)
    integrity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("integrity_bde.id"), type_=int)
    availability_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("availability_bde.id"), type_=int)


class AttackVectorBDE(Base):
    __tablename__ = "attack_vector_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)

class AttackComplexityBDE(Base):
    __tablename__ = "attack_complexity_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class PrivilegesRequiredBDE(Base):
    __tablename__ = "privileges_required_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class UserInteractionBDE(Base):
    __tablename__ = "user_interaction_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class ScopeBDE(Base):
    __tablename__ = "scope_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class ConfidentialityBDE(Base):
    __tablename__ = "confidentiality_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class IntegrityBDE(Base):
    __tablename__ = "integrity_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class AvailabilityBDE(Base):
    __tablename__ = "availability_bde"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)