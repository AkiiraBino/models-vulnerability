import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import BINARY

from settings.db import Base


class BinaryEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    attack_vector_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_vector_be.id"), type_=int)
    attack_complexity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_complexity_be.id"), type_=int)
    privileges_required_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("privileges_required_be.id"), type_=int)
    user_interaction_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("user_interaction_be.id"), type_=int)
    scope_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("scope_be.id"), type_=int)
    confidentiality_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("confidentiality_be.id"), type_=int)
    integrity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("integrity_be.id"), type_=int)
    availability_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("availability_be.id"), type_=int)


class AttackVectorBE(Base):
    __tablename__ = "attack_vector_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_2: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AttackComplexityBE(Base):
    __tablename__ = "attack_complexity_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class PrivilegesRequiredBE(Base):
    __tablename__ = "privileges_required_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class UserInteractionBE(Base):
    __tablename__ = "user_interaction_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class ScopeBE(Base):
    __tablename__ = "scope_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class ConfidentialityBE(Base):
    __tablename__ = "confidentiality_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class IntegrityBE(Base):
    __tablename__ = "integrity_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AvailabilityBE(Base):
    __tablename__ = "availability_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
