import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import FLOAT

from settings.db import Base


class TargetEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    attack_vector_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_vector_te.id"), type_=int)
    attack_complexity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_complexity_te.id"), type_=int)
    privileges_required_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("privileges_required_te.id"), type_=int)
    user_interaction_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("user_interaction_te.id"), type_=int)
    scope_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("scope_te.id"), type_=int)
    confidentiality_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("confidentiality_te.id"), type_=int)
    integrity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("integrity_te.id"), type_=int)
    availability_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("availability_te.id"), type_=int)


class AttackVectorTE(Base):
    __tablename__ = "attack_vector_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class AttackComplexityTE(Base):
    __tablename__ = "attack_complexity_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class PrivilegesRequiredTE(Base):
    __tablename__ = "privileges_required_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class UserInteractionTE(Base):
    __tablename__ = "user_interaction_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class ScopeTE(Base):
    __tablename__ = "scope_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class ConfidentialityTE(Base):
    __tablename__ = "confidentiality_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class IntegrityTE(Base):
    __tablename__ = "integrity_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class AvailabilityTE(Base):
    __tablename__ = "availability_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)