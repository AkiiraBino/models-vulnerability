import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import SMALLINT

from settings.db import Base


class BinaryEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    attack_vector_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_vector_he.id"), type_=int)
    attack_complexity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("attack_complexity_he.id"), type_=int)
    privileges_required_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("privileges_required_he.id"), type_=int)
    user_interaction_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("user_interaction_he.id"), type_=int)
    scope_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("scope_he.id"), type_=int)
    confidentiality_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("confidentiality_he.id"), type_=int)
    integrity_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("integrity_he.id"), type_=int)
    availability_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("availability_he.id"), type_=int)


class AttackVectorHE(Base):
    __tablename__ = "attack_vector_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_2: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class AttackComplexityHE(Base):
    __tablename__ = "attack_complexity_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class PrivilegesRequiredHE(Base):
    __tablename__ = "privileges_required_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class UserInteractionHE(Base):
    __tablename__ = "user_interaction_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class ScopeHE(Base):
    __tablename__ = "scope_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class ConfidentialityHE(Base):
    __tablename__ = "confidentiality_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class IntegrityHE(Base):
    __tablename__ = "integrity_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class AvailabilityHE(Base):
    __tablename__ = "availability_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
