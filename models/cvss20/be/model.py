import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import BINARY

from settings.db import Base


class BinaryEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    access_vector_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_vector_be.id"), type_=int)
    access_complexity_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_complexity_be.id"), type_=int)
    authentication_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("authentication_be.id"), type_=int)
    integrity_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("integrity_impact_be.id"), type_=int)
    confidentiality_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("confidentiality_impact_be.id"), type_=int)
    availability_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("availability_impact_be.id"), type_=int)


class AccessVectorBE(Base):
    __tablename__ = "access_vector_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AccessComplexityBE(Base):
    __tablename__ = "access_complexity_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AuthenticationBE(Base):
    __tablename__ = "authentication_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class IntegrityImpactBE(Base):
    __tablename__ = "integrity_impact_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class ConfidentialityImpactBE(Base):
    __tablename__ = "confidentiality_impact_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AvailabilityImpactBE(Base):
    __tablename__ = "availability_impact_be"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_1: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
