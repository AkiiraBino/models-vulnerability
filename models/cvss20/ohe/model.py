import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import BINARY

from settings.db import Base


class OneHotEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    access_vector_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_vector_ohe.id"), type_=int)
    access_complexity_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_complexity_ohe.id"), type_=int)
    authentication_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("authentication_ohe.id"), type_=int)
    integrity_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("integrity_impact_ohe.id"), type_=int)
    confidentiality_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("confidentiality_impact_ohe.id"), type_=int)
    availability_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("availability_impact_ohe.id"), type_=int)


class AccessVectorOHE(Base):
    __tablename__ = "access_vector_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_A: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AccessComplexityOHE(Base):
    __tablename__ = "access_complexity_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_H: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_L: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_M: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AuthenticationOHE(Base):
    __tablename__ = "authentication_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_M: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_S: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class IntegrityImpactOHE(Base):
    __tablename__ = "integrity_impact_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_C: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_P: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class ConfidentialityImpactOHE(Base):
    __tablename__ = "confidentiality_impact_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_C: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_P: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)


class AvailabilityImpactOHE(Base):
    __tablename__ = "availability_impact_ohe"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_C: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_N: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)
    value_P: so.Mapped[BINARY] = so.mapped_column(nullable=False, type_=BINARY)