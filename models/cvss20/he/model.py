import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import SMALLINT

from settings.db import Base


class HelmertEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True, type_=int)
    original_id: so.Mapped[int] = so.Mapped(sa.ForeignKey("original.id"), type_=int)
    access_vector_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_vector_he.id"), type_=int)
    access_complexity_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_complexity_he.id"), type_=int)
    authentication_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("authentication_he.id"), type_=int)
    integrity_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("integrity_impact_he.id"), type_=int)
    confidentiality_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("confidentiality_impact_he.id"), type_=int)
    availability_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("availability_impact_he.id"), type_=int)


class AccessVectorHE(Base):
    __tablename__ = "access_vector_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class AccessComplexityHE(Base):
    __tablename__ = "access_complexity_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class AuthenticationHE(Base):
    __tablename__ = "authentication_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class IntegrityImpactHE(Base):
    __tablename__ = "integrity_impact_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class ConfidentialityImpactHE(Base):
    __tablename__ = "confidentiality_impact_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)


class AvailabilityImpactHE(Base):
    __tablename__ = "availability_impact_he"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
    value_1: so.Mapped[SMALLINT] = so.mapped_column(nullable=False, type_=SMALLINT)
