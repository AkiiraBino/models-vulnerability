import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.dialects.mysql import FLOAT

from settings.db import Base

class TargetEncoder(Base):
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    original_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("original.id"))
    access_vector_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_vector_te.id"), type_=int)
    access_complexity_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("access_complexity_te.id"), type_=int)
    authentication_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("authentication_te.id"), type_=int)
    integrity_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("integrity_impact_te.id"), type_=int)
    confidentiality_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("confidentiality_impact_te.id"), type_=int)
    availability_impact_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("availability_impact_te.id"), type_=int)

class AccessVectorTE(Base):
    __tablename__ = "access_vector_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class AccessComplexityTE(Base):
    __tablename__ = "access_complexity_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)

class AuthenticationTE(Base):
    __tablename__ = "authentication_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class IntegrityImpactTE(Base):
    __tablename__ = "integrity_impact_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class ConfidentialityImpactTE(Base):
    __tablename__ = "confidentiality_impact_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)


class AvailabilityImpactTE(Base):
    __tablename__ = "availability_impact_te"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_0: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_1: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_2: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    value_3: so.Mapped[FLOAT] = so.mapped_column(nullable=False, type_=FLOAT)
    