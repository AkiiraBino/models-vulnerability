import sqlalchemy as sa
import sqlalchemy.orm as so
from sqlalchemy.orm import declarative_base


Base = declarative_base()

from config import metadata

class BackwardDifference(Base):
    __tablename__ = "backward_difference"

    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    original_id: so.Mapped[int] = so.mapped_column(sa.ForeignKey("original.id"))
    confidentiality_impact_1: so.Mapped[float] 
    confidentiality_impact_2: so.Mapped[float] 
    confidentiality_impact_3: so.Mapped[float] 
    integrity_impact_1: so.Mapped[float]
    integrity_impact_2: so.Mapped[float]
    availability_impact_1: so.Mapped[float]
    availability_impact_2: so.Mapped[float]


access_vector_to_BD = sa.Table(
    "access_vector_to_bd",
    metadata,
    sa.Column("id", primary_key=True, autoincrement=True),
    sa.Column("original_id", sa.ForeignKey("backward_difference.id")),
    sa.Column("access_vector_id", sa.ForeignKey("access_vector_bd.id")),
)


class AccessVectorBD(Base):
    __tablename__ = "access_vector_bd"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_1: so.Mapped[float]
    value_2: so.Mapped[float]
    value_3: so.Mapped[float]


access_complexity_to_bd = sa.Table(
    "access_complexity_to_bd",
    metadata,
    sa.Column("id", primary_key=True, autoincrement=True),
    sa.Column("original_id", sa.ForeignKey("backward_difference.id")),
    sa.Column("access_complexity_id", sa.ForeignKey("access_complexity_bd.id")),
)


class AccessComplexityBD(Base):
    __tablename__ = "access_complexity_bd"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value: so.Mapped[float]


authentication_to_bd = sa.Table(
    "authentication_to_bd",
    metadata,
    sa.Column("id", primary_key=True, autoincrement=True),
    sa.Column("original_id", sa.ForeignKey("backward_difference.id")),
    sa.Column("authentication_id", sa.ForeignKey("authentication_bd.id")),
)


class AuthenticationBD(Base):
    __tablename__ = "authentication_bd"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_1: so.Mapped[float]
    value_2: so.Mapped[float]
    value_3: so.Mapped[float]


confidentiality_impact_to_bd = sa.Table(
    "confidentiality_impact_to_bd",
    metadata,
    sa.Column("id", primary_key=True, autoincrement=True),
    sa.Column("original_id", sa.ForeignKey("backward_difference.id")),
    sa.Column("confidentiality_impact_id", sa.ForeignKey("confidentiality_impact.id")),
)


class ConfidentialityImpactBD(Base):
    __tablename__ = "confidentiality_impact_bd"
    id: so.Mapped[int] = so.mapped_column(primary_key=True, autoincrement=True)
    value_1: so.Mapped[float]
    value_2: so.Mapped[float]
    value_3: so.Mapped[float]